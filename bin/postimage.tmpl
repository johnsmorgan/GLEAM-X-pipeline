#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M HOST
#SBATCH -p workq
#SBATCH --account=ACCOUNT
#SBATCH --time=03:00:00
#SBATCH --nodes=1
#SBATCH --ntasks=NCPUS

source /group/mwasci/$SLURM_JOB_USER/GLEAM-X-pipeline/GLEAM-X-pipeline.profile

# Makes fits_warp parallelisation work on Zeus
KMP_INIT_AT_FORK=false
# Sub-channels
subchans="0000 0001 0002 0003 MFS"
# flux_warp method
method=scaled
# Sky model
MODEL_CATALOGUE="/group/mwasci/${SLURM_JOB_USER}/GLEAM-X-pipeline/models/skymodel_only_alpha_sparse_unresolved.fits"
# Set max separation for flux_warp crossmatch as ~ 1' -- unlikely that the ionosphere would be that brutal
separation=$(echo "60/3600" | bc -l)
# Set exclusion for flux_warp internal exclusive crossmatch as ~ 3'
exclusion=$(echo "180/3600" | bc -l)

datadir=BASEDIR
obsnum=OBSNUM

cd $datadir/$obsnum

for subchan in ${subchans}
do
    BMAJ=$( pyhead.py -p BMAJ ${obsnum}_deep-${subchan}-image-pb.fits | awk '{print $3}' )
    if [[ "$BMAJ" == "0"  ]]
    then
        echo "${obsnum}_deep-${subchan}-image-pb.fits has zero-size PSF: something is broken!"
        exit 1
    fi

    if [[ ! -e ${obsnum}_deep-${subchan}-image-pb_comp.fits  ]]
    then
        BANE --compress --noclobber ${obsnum}_deep-${subchan}-image-pb.fits
        aegean --autoload --table=./${obsnum}_deep-${subchan}-image-pb.fits ./${obsnum}_deep-${subchan}-image-pb.fits > >(tee -a ${obsnum}_deep-${subchan}_aegean.log) 2> >(tee -a ${obsnum}_deep-${subchan}_aegean.log >&2)
    fi
    nsrc=`grep "INFO found" ${obsnum}_deep-${subchan}_aegean.log | head -1 | awk '{print $3}'`
    if [[ $nsrc -lt 500 ]]
    then
        echo "Can't warp ${obsnum} -- only $nsrc sources -- probably a horrible image"
    else
        RA=$( pyhead.py -p RA ${obsnum}.metafits | awk '{print $3}' )
        Dec=$( pyhead.py -p DEC ${obsnum}.metafits | awk '{print $3}' )
        chan=$( pyhead.py -p CENTCHAN ${obsnum}.metafits | awk '{print $3}' )
        mid=$( pyhead.py -p CRVAL3 ${obsnum}_deep-${subchan}-image-pb.fits | awk '{print $3}' )
        freqq=`echo $mid | awk '{printf "%03.0f",($1)/1e6}'`

        # Roughly the centre and radius of the image:
        coords="$RA $Dec"
        # TODO make this dependent on CENTCHAN
        radius=50. #24.8

        if [[ ! -e ${obsnum}_${subchan}_xm.fits ]]
        then
            # Match the image catalogue to the model table:
            match_catalogues \
             ${obsnum}_deep-${subchan}-image-pb_comp.fits \
             ${MODEL_CATALOGUE} \
             --separation ${separation} \
             --exclusion_zone ${exclusion} \
             --outname ./${obsnum}_${subchan}_xm.fits \
             --threshold 0.5 \
             --nmax 1000 \
             --coords ${coords} \
             --radius ${radius} \
             --ra2 "RAJ2000" \
             --dec2 "DEJ2000" \
             --ra1 "ra" \
             --dec1 "dec" \
             -F "int_flux" \
             --eflux "err_int_flux" \
             --localrms "local_rms"
        fi

        if [[ ! -e ${obsnum}_deep-${subchan}-image-pb_warp.fits ]]
        then
            fits_warp.py --xm ./${obsnum}_${subchan}_xm.fits \
                         --suffix warp \
                         --infits ./${obsnum}_deep-${subchan}-image-pb.fits \
                         --ra1 old_ra --dec1 old_dec \
                         --ra2 RAJ2000 --dec2 DEJ2000 \
                         --plot \
                         --cores NCPUS
# --signal peak_flux --noise local_rms --SNR 10
        fi
        if [[ ! -e ${obsnum}_deep-${subchan}-image-pb_warp_${method}_cf_output.txt ]]
        then
            flux_warp \
                 ${obsnum}_${subchan}_xm.fits \
                 ${obsnum}_deep-${subchan}-image-pb_warp.fits \
                 --mode mean \
                 --freq ${freqq} \
                 --threshold 0.5 \
                 --nmax 400 \
                 --flux_key "flux" \
                 --smooth 5.0 \
                 --ignore_magellanic \
                 --localrms_key "local_rms" \
                 --add-to-header \
             --ra_key "RAJ2000" \
             --dec_key "DEJ2000" \
             --index "alpha" \
             --curvature "beta" \
                 --ref_flux_key "S_200" \
                 --ref_freq 200.0 \
                 --alpha -0.77 \
                 --plot \
                 --cmap "gnuplot2" \
             --update-bscale \
             --order 2 \
             --ext png \
             --nolatex
        fi
        factor=`pyhead.py -p BSCALE ${obsnum}_deep-${subchan}-image-pb_warp.fits | awk '{print $3}'`
# The RMS and BKG maps will not have changed much from the ionospheric warping, so I can just rename them and update BSCALE
        mv ${obsnum}_deep-${subchan}-image-pb_rms.fits ${obsnum}_deep-${subchan}-image-pb_warp_rms.fits
        mv ${obsnum}_deep-${subchan}-image-pb_bkg.fits ${obsnum}_deep-${subchan}-image-pb_warp_bkg.fits
        pyhead.py -u BSCALE $factor ${obsnum}_deep-${subchan}-image-pb_warp_bkg.fits
        pyhead.py -u BSCALE $factor ${obsnum}_deep-${subchan}-image-pb_warp_rms.fits
# rerun the source-finding -- don't save to the log this time as the numbers should not have changed
        if [[ ! -e ${obsnum}_deep-${subchan}-image-pb_warp_comp.fits ]]
        then
            aegean --autoload --table=./${obsnum}_deep-${subchan}-image-pb_warp.fits ./${obsnum}_deep-${subchan}-image-pb_warp.fits
        fi
        if [[ ! -e ${obsnum}_deep-${subchan}-image-pb_warp_weight.fits ]]
        then
# Generate a weight map for mosaicking
            chans=($( pyhead.py -p CHANNELS ${obsnum}.metafits | awk '{print $3}' | sed "s/,/ /g" ))
            if [[ ${subchan} == "MFS" ]]
            then
                i=0
                j=23
            else
                n=${subchan:3}
                i=$((n * 6))
                j=$((i + 5))
            fi
            cstart=${chans[$i]}
            cend=${chans[$j]}
            python /group/mwasci/nhurleywalker/mwa_pb_lookup/lookup_beam.py ${obsnum} _deep-${subchan}-image-pb_warp.fits ${obsnum}_deep-${subchan}-image-pb_warp- -c $cstart-$cend --beam_path /group/mwasci/pb_lookup/gleam_xx_yy.hdf5
            python /group/mwasci/${SLURM_JOB_USER}/GLEAM-X-pipeline/bin/generate_weight_map.py ${obsnum}_deep-${subchan}-image-pb_warp-XX-beam.fits ${obsnum}_deep-${subchan}-image-pb_warp-YY-beam.fits ${obsnum}_deep-${subchan}-image-pb_warp_rms.fits
        fi
    fi
done
