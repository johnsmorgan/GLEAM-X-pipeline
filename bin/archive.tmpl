#! /bin/bash -l
#SBATCH --export=NONE
#SBATCH -M HOST
#SBATCH -p STANDARDQ
#SBATCH --account=ACCOUNT
#SBATCH --time=6:00:00
#SBATCH --ntasks=NCPUS
#SBATCH --nodes=1
ARRAYLINE

set -x

pipeuser=PIPEUSER
source /group/mwasci/$pipeuser/GLEAM-X-pipeline/GLEAM-X-pipeline.profile
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f ${obsnum} ]]
then
    taskid=${SLURM_ARRAY_TASK_ID}
    jobid=${SLURM_ARRAY_JOB_ID}

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e ${SLURM_ARRAY_TASK_ID}p ${obsnum})
    echo "postimage obsid ${obsnum}"
else
    taskid=1
    jobid=${SLURM_JOB_ID}
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"


function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid=${jobid} --taskid=${taskid} --finish_time=`date +%s`
    exit $1
fi
}

track_task.py start --jobid=${jobid} --taskid=${taskid} --start_time=`date +%s`

base=BASEDIR
user=ENDUSER
host=ENDPOINT
remote=REMOTE

datadir=${base}/${obsnum}
cd ${datadir}

subchans="0000 0001 0002 0003 MFS"

# Post procressing tasks unrelated to fitswarp
for subchan in ${subchans}
do
    # Compress the near empty model files
    clip_clean_components.py ${obsnum}_deep-${subchan}-model.fits
    clip_clean_components.py ${obsnum}_deep-${subchan}-model-pb.fits
    
    # Dont like having to do I/O redirection for gzip to keep original file
    zip ${obsnum}_deep-${subchan}-models-clip.zip ${obsnum}_deep-${subchan}-model*-clip.fits

    # Zip the model components
    # model=${obsnum}_deep-${subchan}-model
    # zip=${model}.zip
    # if [[ ! -e ${zip} ]]
    # then
    #     zip -r ${zip} ${model}*.fits
    # fi

    # Create an extract of the psf
    psf=${obsnum}_deep-${subchan}-psf.fits
    crop=${psf%.fits}_crop.fits
    if [[ ! -e ${crop} ]]
    then
        # Get size of the total image
        x=$(imsize ${psf} | tr -s [:blank:] ' ' | cut -d ' ' -f7 | cut -d 'x' -f1)
        y=$(imsize ${psf} | tr -s [:blank:] ' ' | cut -d ' ' -f7 | cut -d 'x' -f2)
        
        # Pixels in central region to extract
        SIZE=200 

        # Bounds of region
        let "x1 = $x/2 - $SIZE/2" 
        let "x2 = $x/2 + $SIZE/2"
        let "y1 = $y/2 - $SIZE/2"
        let "y2 = $y/2 + $SIZE/2"

        # and extract
        getfits -o ${crop} ${x1}-${x2} ${y1}-${y2} ${psf}
    fi

    # Compress the primary beam warped weight map
    warp=${obsnum}_deep-${subchan}-image-pb_warp_weight.fits
    compress=${warp}.sr6
    if [[ ! -e ${compress} ]]
    then
        SR6 -o ${compress} $warp
    fi
done


rsync -avh --progress --stats *csv \
                              *clip.zip \
                              *png \
                              *log \
                              *fits.sr6 \
                              ${obsnum}_deep-*-psf_crop.fits \
                              ${obsnum}_deep-*-image-pb.fits \
                              ${obsnum}_*_xm.fits \
                              $user@$host:"$remote/$obsnum"

test_fail $?

echo 'Updating database'
track_task.py finish --jobid=${jobid} --taskid=${taskid} --start_time=`date +%s`

track_task.py obs_status --obs_id=${obsnum} --status=archived
echo "Database updated. Obsid $obsid has been archived. "